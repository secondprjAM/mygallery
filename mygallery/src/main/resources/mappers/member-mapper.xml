<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE mapper PUBLIC
"-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="memberMapper">

	<!-- select 한 결과집합 ResultSet 에서 한 행씩 꺼내서 
	각 컬럼값들을 vo 객체의 각 필드에 저장 처리하는 작업
	: 결과 매핑
	리스트나 맵에 여러 객체를 저장 처리도 포함됨 -->
	<resultMap type="Member" id="resultList">
		<result property="userid" column="userid" />
		<result property="userpassword" column="userpassword" />
		<result property="useremail" column="useremail" />
		<result property="username" column="username" />
		<result property="usergender" column="usergender" />
		<result property="userloginok" column="userloginok" />
		<result property="useradmin" column="useradmin" />
	</resultMap>

		<!-- 회원 아이디(userid)로 회원정보 조회 -->
	<select id="selectMember" parameterType="string" resultType="Member">
		select * from member
		where userid = #{ userid } 
	</select>

	<!-- 회원 가입 -->
	<insert id="insertMember" parameterType="Member">
		insert into member (userid, userpassword, useremail, username, usergender, useradmin, userloginok)
		values (#{ userid }, #{ userpassword }, #{ useremail }, #{ username }, #{ usergender }, default, default)
	</insert>

	<!-- 회원가입시 아이디 중복 체크 처리용 -->
	<select id="selectCheckId" parameterType="string" resultType="_int">
		select count(userid) from member
		where userid = #{ uid }
	</select>

	<!-- 로그인 -->
	<select id="selectLogin" parameterType="Member" resultType="Member">
		select * from member
		where userid = #{ userid } and userpassword = #{ userpassword }
		and userloginok = 'Y'
	</select>
	
	<!-- 이름, 이메일로 아이디 찾기 -->
	<select id = "findId" parameterType="Member" resultType="string">
		select userid from member
		where username = #{ username } and useremail = #{ useremail }
	</select>
	
	<!-- 비밀번호 변경 -->
	<update id="updateMember" parameterType="Member">
		update member
		set userpassword = #{ userpassword }
		where userid = #{ userid }
	</update>
	
	<!-- 회원 탈퇴 -->
	<delete id="deleteMember" parameterType="string">
		delete from member
		where userid = #{ uid }
	</delete>
	
	<!-- 비밀번호 찾기 변경 -->
	<update id = "pwUpdate" parameterType="Member">
		update member
		set userpassword = #{ userpassword }
		where userid = #{ userid }
	</update>

	<!-- 회원 전체 조회용 -->
	<select id="selectList" resultMap="resultList">
		select * from member
		order by userid asc
	</select>
	
	<select id="getListCount" resultType="_int">
		select count(*) from member
	</select>
	
	<!-- loginok 값 변경용 -->
	<update id="updateLoginOK" parameterType="Member">
		update member
		set userloginok = #{ userloginok }
		where userid = #{ userid }
		</update>
	
	<!-- 회원 검색 처리용 쿼리문 -->
	<select id="selectSearchUserid" parameterType="string" resultMap="resultList">
		select * from member
		where userid like '%' || #{ keyword } || '%' 
		order by userid asc
	</select>
	
	<select id="selectSearchLoginOK" parameterType="string" resultMap="resultList">
		select * from member
		where userloginok = #{ keyword } 
		order by userid asc
	</select>
	
	<!-- 관리자 제외한 회원 조회용 & 페이징 처리 -->
	<select id="selectList2" parameterType="Paging" resultMap="resultList">
	    <![CDATA[
		select * 
		from (select rownum rnum, userid, username,  
					useremail, usergender, userloginok
			 from (select * from member		
			 		where userid not like '%admin%' 
			 		order by userid asc)) 
		where rnum >= #{startRow} and rnum <= #{endRow}
	    ]]>
	</select>
	
	<!-- 회원 검색 처리용 쿼리문 & 검색 페이징 -->
	<select id="selectSearchUseridP" parameterType="SearchPaging" resultMap="resultList">
		<![CDATA[
		select * 
		from (select rownum rnum, userid, username,  
					useremail, usergender, userloginok
				from (select * from member
					where userid like '%' || #{ keyword } || '%' and userid not like '%admin%' 
					order by userid asc)) 
		where rnum >= #{startRow} and rnum <= #{endRow}
	    ]]>
	</select>
	
	<select id="selectSearchLoginOKP" parameterType="SearchPaging" resultMap="resultList">
		<![CDATA[
		select * 
		from (select rownum rnum, userid, username,  
					useremail, usergender, userloginok
			 	from (select * from member
						where userloginok = #{ keyword } and userid not like '%admin%' 
						order by userid asc)) 
		where rnum >= #{startRow} and rnum <= #{endRow}
	    ]]>
	</select>
	
</mapper>